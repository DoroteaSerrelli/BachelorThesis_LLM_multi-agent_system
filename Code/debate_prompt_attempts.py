###DEBATE AS ANSWER MULTIPLE CHOICE QUESTIONS

from metrics import extract_time_complexity
from utility_function import get_formatted_code_solution
from response_JSON_schema import schema_feedback


def get_multiple_choice_numbers_prompt(answers, readability_complexity, AGENTS_NO):
    deb_prompt = (
            'Here are some proposed solutions (0, 1, 2, ...) for the code generation problem:\n'
    )

    for i in range(0, AGENTS_NO):
        if (answers[i] != ""):
            deb_prompt += (f"\n**{i}.**\n---\n{answers[i]}\n"
                           f"* Time complexity: {extract_time_complexity(answers[i])}\n"
                           f"* Cognitive complexity: {readability_complexity[i]}\n"
                           f"---\n"
                           )

    deb_prompt += (f"""\nConsidering both time complexity and cognitive complexity, which of the proposed solutions is the best?
                            Respond with **only** the corresponding number of the best solution.
                            Your response must be a **single integer** between 0 and {AGENTS_NO - 1} with **no explanation**, **no text**, and **no punctuation**.
                            Responding with anything other than a number will be considered an error."""
                       )

    return deb_prompt
#----------------------------------------------------------------------------


#---- DRAFT
example_debate_prompt = """\
# Instruction
You are an expert source code evaluator. Your task is to analyze a list of the source code generated by AI models
and select the best one.
We will provide you with the user input (the original coding prompt) and a list of {AGENTS_NO} AI-generated code response.
You should first read the user input carefully to understand the coding task, and then select the best code 
response based on the **Evaluation** section below.

# Evaluation
## Metric Definition
Each code solution has:
    - an unique number between 0 and {AGENTS_NO-1};
    - a time complexity expressed in Big-O notation;
    - a cognitive complexity. 

You will be assessing each code solution according the following aspects: time complexity and cognitive complexity.
The definition of each criteria is described in Criteria section.
According these criteria, you will generate an integer which is the unique number related to the best code solution. 
The instruction for the coding task is provided in the **User Input** section, while the list of code solutions 
is provided in the **AI-generated Responses** section.


## Criteria
- Time complexity: it measures how the execution time of the algorithm grows as the input size increases. 
Big-O notation (O) is the standard for expressing time complexity. More lower it is, better the code solution is.
- Cognitive complexity: it quantifies the difficulty for a human to understand a piece of code or a function.
More lower it is, better the code solution is.

# Output Format
Return only a single integer which corresponds to the unique number of the best code solution choosen.
Your response must be a single integer with **no explanation**, **no text**, and **no punctuation**.
Responding with anything other than a number will be considered an error.


## Evaluation Steps
STEP 1: Analyze each code response in terms of time complexity and cognitive complexity.
STEP 2: Provide your answer as described in **Output Format** section.


# User Input
{user_prompt}

## AI-generated Responses
{ai_responses}


"""

#--- REFINED

example_refined_debate_prompt = """
# Instruction
You are an expert source code evaluator. Your task is to analyze a list of the source code generated by AI models
and select the best one.
We will provide you with the user input (the original coding prompt) and a list of {AGENTS_NO} AI-generated code response.
You should first read the user input carefully to understand the coding task, and then select the best code 
response based on the **Evaluation** section below.

# Evaluation
## Metric Definition
Each code solution has:
    - an unique number between 0 and {_AGENTS_NO-1};
    - a time complexity expressed in Big-O notation;
    - a cognitive complexity. 

You will be assessing each code solution according the following aspects: time complexity and cognitive complexity.
The definition of each criteria is described in Criteria section.
According these criteria, you will generate an integer which is the unique number related to the best code solution. 
Prioritize solutions with lower time complexity first. If time complexities are equal, then prioritize lower cognitive complexity.
The instruction for the coding task is provided in the **User Input** section, while the list of code solutions 
is provided in the **AI-generated Responses** section.


## Criteria
- Time complexity: it measures how the execution time of the algorithm grows as the input size increases. 
Big-O notation (O) is the standard for expressing time complexity. More lower it is (e.g., O(N) is better than O(N^2)), better the code solution is.
- Cognitive complexity: it quantifies the difficulty for a human to understand a piece of code or a function.
More lower it is (e.g., a flat structure is better than deeply nested loops), better the code solution is.

# Output Format
Return only a single integer which corresponds to the unique number of the best code solution choosen.
Your response must be a single integer with **no explanation**, **no text**, and **no punctuation**.
Responding with anything other than a number will be considered an error.


## Evaluation Steps
STEP 1: Analyze each code response in terms of time complexity and cognitive complexity.
STEP 2: Based on the defined criteria and prioritization, select the best code solution.
STEP 3: Provide your answer as described in **Output Format** section.


# User Input
{user_prompt}

## AI-generated Responses
{ai_responses}
"""

def get_formatted_responses(responses, cognitive_complexity, AGENTS_NO): #responses = JSON responses
    extracted_formatted_responses = []
    extracted_time_complexity = []

    formatted_responses = []

    string = "\n------\n"

    for i in range(0, AGENTS_NO):
        extracted_formatted_responses.append(get_formatted_code_solution(responses[i]))
        extracted_time_complexity.append(extract_time_complexity(responses[i]))

    for i in range(0, AGENTS_NO):
        formatted_responses.append(string + "SOLUTION: " + extracted_formatted_responses[i] +
                                  "\nUNIQUE NUMBER OF SOLUTION: " + str(i) +
                                  "\nTIME COMPLEXITY: " + extracted_time_complexity[i] +
                                  "\nCOGNITIVE COMPLEXITY: " + str(cognitive_complexity[i]))

    return formatted_responses

def get_refined_debate_prompt(AGENTS_NO, user_prompt, formatted_responses):

    prompt = example_refined_debate_prompt
    prompt = prompt.replace("{AGENTS_NO}", str(AGENTS_NO))
    prompt = prompt.replace("{_AGENTS_NO-1}", str(AGENTS_NO-1))
    prompt = prompt.replace("{user_prompt}", user_prompt)
    ai_responses = ""

    for var in formatted_responses:
        ai_responses += var

    prompt = prompt.replace("{ai_responses}", ai_responses)

    return prompt

def get_refined_agreement(model, deb_prompt):
    messages = [{"role": "user", "content": deb_prompt}]
    response = model.respond({"messages": messages}, response_format=schema_feedback)
    return response.content




def getDiscussionGivenAnswersFeedbackPrompt_NoComparing(answers, user_prompt, readability_complexity, AGENTS_NO):
    deb_prompt = (
        f'''Here are several solutions to the following code generation problem:
        -----
        CODE GENERATION TASK:
        {user_prompt}
        -----\n'''
        ' Each solution is identified by a unique number and includes:'
        '* The code;'
        '* a time complexity (in Big-O notation); '
        '* a cognitive complexity score (how difficult the solution is to understand and maintain). '
        'Your task is to select the best solution based on both time and cognitive complexity.'
    )

    for i in range(0, AGENTS_NO):
        if (answers[i] != ""):
            deb_prompt += (f"\n**{i}.**\n---\n{answers[i]}\n"
                           f"* Time complexity: {extract_time_complexity(answers[i])}\n"
                           f"* Cognitive complexity: {readability_complexity[i]}\n"
                           f"---\n"
                           )

    deb_prompt += (f"""\nOnce selected the best solution, answers with **only** the number of the chosen solution.
                        Your response must be a **single integer**, **without any explanations**, **no additional text**, and **no punctuation**.
                        Responding with anything other than a number will be considered an error.""")

    return deb_prompt
